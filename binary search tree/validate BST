# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        def helper(node, lower=float('-inf'), upper=float('inf')):
            if not node:
                return True
            val = node.val
            if val <= lower or val >= upper:
                return False
            # Left subtree: upper bound is current node value
            if not helper(node.left, lower, val):
                return False
            # Right subtree: lower bound is current node value
            if not helper(node.right, val, upper):
                return False
            return True
        
        return helper(root)


              Example
Input: [2,1,3]

      2
     / \
    1   3

Output: True


Node 2: valid range (-∞, ∞)

Node 1: valid range (-∞, 2) → ok

Node 3: valid range (2, ∞) → ok

Time Complexity

O(n), n = number of nodes

Space Complexity

O(h), h = height of tree (recursion stack)
