from typing import List

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        result = []
        
        def backtrack(path, remaining):
            if not remaining:
                result.append(path[:])  # Add a copy of the current permutation
                return
            
            for i in range(len(remaining)):
                # Choose
                path.append(remaining[i])
                # Explore
                backtrack(path, remaining[:i] + remaining[i+1:])
                # Un-choose (backtrack)
                path.pop()
        
        backtrack([], nums)
        return result

# Example usage
print(Solution().permute([1,2,3]))
# Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
