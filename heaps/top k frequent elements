from typing import List
from collections import Counter
import heapq

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        # Step 1: Count frequency of each element
        freq_map = Counter(nums)  # {num: count}
        
        # Step 2: Use a min heap of size k to keep top k frequent elements
        min_heap = []
        for num, freq in freq_map.items():
            heapq.heappush(min_heap, (freq, num))  # Push tuple (freq, num)
            if len(min_heap) > k:                  # Keep heap size at k
                heapq.heappop(min_heap)
        
        # Step 3: Extract elements from heap
        return [num for freq, num in min_heap]


Example Walkthrough
nums = [1,1,1,2,2,3]
k = 2


Step 1: Count frequency

freq_map = {1:3, 2:2, 3:1}


Step 2: Build min heap of size 2

Push (3,1) → heap = [(3,1)]

Push (2,2) → heap = [(2,2), (3,1)]

Push (1,3) → heap size > 2 → pop smallest → heap = [(2,2), (3,1)]

Step 3: Extract elements → [2, 1] (order doesn’t matter)

✅ Time Complexity: O(n log k)
✅ Space Complexity: O(n + k)
