# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        res = []
        
        def postorder(node):
            if not node:
                return
            postorder(node.left)    # visit left
            postorder(node.right)   # visit right
            res.append(node.val)    # visit root
        
        postorder(root)
        return res




   or





   class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []
        
        res, stack = [], [root]
        
        while stack:
            node = stack.pop()
            res.append(node.val)
            # Push left first so right is processed first
            if node.left:
                stack.append(node.left)
            if node.right:
                stack.append(node.right)
        
        # Reverse result to get postorder: left → right → root
        return res[::-1]
