from collections import deque

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        
        max_width = 0
        # Queue stores tuple: (node, index)
        queue = deque([(root, 0)])
        
        while queue:
            level_length = len(queue)
            _, first_index = queue[0]  # leftmost index at this level
            for i in range(level_length):
                node, index = queue.popleft()
                # Normalize index to prevent overflow
                index -= first_index
                if node.left:
                    queue.append((node.left, 2*index + 1))
                if node.right:
                    queue.append((node.right, 2*index + 2))
                if i == level_length - 1:  # rightmost node
                    last_index = index
            # Update max width
            max_width = max(max_width, last_index + 1)
        
        return max_width




        Example Walkthrough
Input: [1,3,2,5,3,null,9]

Level 1: [1] → width = 1
Level 2: [3,2] → width = 2
Level 3: [5,3,null,9] → width = 4 (maximum)
Output: 4

Time & Space Complexity

Time → O(n) (visit every node once)

Space → O(n) (queue stores at most n/2 nodes at a level)
