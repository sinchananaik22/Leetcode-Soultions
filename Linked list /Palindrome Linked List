# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        if not head or not head.next:
            return True
        
        # Step 1: Find middle
        slow = head
        fast = head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        
        # Step 2: Reverse second half
        prev = None
        curr = slow
        while curr:
            nxt = curr.next
            curr.next = prev
            prev = curr
            curr = nxt
        
        # Step 3: Compare halves
        first = head
        second = prev
        while second:  # only need to check second half
            if first.val != second.val:
                return False
            first = first.next
            second = second.next
        
        return True




Example Walkthrough

Input: [1,2,2,1]

Middle found at first 2

Reverse second half → [1,2]

Compare: first half [1,2] vs reversed second half [1,2] → match ✅

Output: True

Input: [1,2]

Middle is 2

Reverse second half → [2]

Compare: first half [1] vs second half [2] → mismatch ❌

Output: False

⚡ Complexity

Time: O(n) → traverse list twice

Space: O(1) → in-place reversal

