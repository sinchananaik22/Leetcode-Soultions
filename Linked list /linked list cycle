# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        slow = head
        fast = head
        
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            if slow == fast:
                return True
        
        return False



Example Walkthrough

Input: head = [3,2,0,-4], pos = 1

Step 1: slow=3, fast=3

Step 2: slow=2, fast=0

Step 3: slow=0, fast=2

Step 4: slow=-4, fast=-4 → slow meets fast ✅

Output: True

⚡ Complexity

Time: O(n) → each node visited at most twice

Space: O(1) → no extra space
