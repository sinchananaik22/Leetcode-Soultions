# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if not head or not head.next or k == 0:
            return head
        
        # Step 1: Compute length
        length = 1
        tail = head
        while tail.next:
            tail = tail.next
            length += 1
        
        # Step 2: Make circular
        tail.next = head
        
        # Step 3: Find new tail
        k = k % length
        steps_to_new_tail = length - k - 1
        new_tail = head
        for _ in range(steps_to_new_tail):
            new_tail = new_tail.next
        
        # Step 4: Set new head and break circle
        new_head = new_tail.next
        new_tail.next = None
        
        return new_head



Example Walkthrough

Input: [1,2,3,4,5], k = 2

Length = 5

k % length = 2 → rotate 2 places

Steps to new tail = 5 - 2 - 1 = 2 → node with value 3

New head = 4

Break circle → [4,5,1,2,3] ✅

Input: [0,1,2], k = 4

Length = 3

k % 3 = 1 → rotate 1 place

New tail = node 1

New head = node 2

Output → [2,0,1] ✅

⚡ Complexity

Time: O(n) → traverse list twice

Space: O(1) → constant extra space
