# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slow = head
        fast = head
        
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        
        return slow





  Example Walkthrough

Input: [1,2,3,4,5]

Step 1: slow=1, fast=1

Step 2: slow=2, fast=3

Step 3: slow=3, fast=5 ✅ reached end

Output: node with value 3 → [3,4,5]

Input: [1,2,3,4,5,6]

Step 1: slow=1, fast=1

Step 2: slow=2, fast=3

Step 3: slow=3, fast=5

Step 4: slow=4, fast=None → stop

Output: node with value 4 → [4,5,6]

⚡ Complexity

Time: O(n) → traverse list once

Space: O(1) → no extra space
