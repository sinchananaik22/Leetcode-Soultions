# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode(-1)
        tail = dummy
        
        while list1 and list2:
            if list1.val <= list2.val:
                tail.next = list1
                list1 = list1.next
            else:
                tail.next = list2
                list2 = list2.next
            tail = tail.next
        
        # attach the remaining nodes
        tail.next = list1 if list1 else list2
        
        return dummy.next




      Example Walkthrough

Input: list1 = [1,2,4], list2 = [1,3,4]

Compare 1 vs 1 → pick 1 from list1

Compare 2 vs 1 → pick 1 from list2

Compare 2 vs 3 → pick 2

Compare 4 vs 3 → pick 3

Compare 4 vs 4 → pick 4

Attach remaining 4

Output: [1,1,2,3,4,4]

⚡ Complexity

Time: O(n + m) → traverse all nodes

Space: O(1) iterative, O(n + m) recursive (stack)
