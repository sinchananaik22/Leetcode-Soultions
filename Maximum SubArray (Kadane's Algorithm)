from typing import List

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        # Initialize with the first element
        max_sum = nums[0]
        curr_sum = nums[0]
        
        # Iterate through the array starting from index 1
        for i in range(1, len(nums)):
            # Either extend the current subarray or start a new one
            curr_sum = max(nums[i], curr_sum + nums[i])
            
            # Update the max_sum if needed
            max_sum = max(max_sum, curr_sum)
        
        return max_sum




Example:

nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]

We maintain:

curr_sum = current subarray sum

max_sum = best (maximum) sum seen so far

Step-by-step:

Start with first element:
curr_sum = -2, max_sum = -2

At index 1 → 1

curr_sum = max(1, -2 + 1) = 1

max_sum = max(-2, 1) = 1

At index 2 → -3

curr_sum = max(-3, 1 + -3) = -2

max_sum = max(1, -2) = 1

At index 3 → 4

curr_sum = max(4, -2 + 4) = 4

max_sum = max(1, 4) = 4

At index 4 → -1

curr_sum = max(-1, 4 + -1) = 3

max_sum = max(4, 3) = 4

At index 5 → 2

curr_sum = max(2, 3 + 2) = 5

max_sum = max(4, 5) = 5

At index 6 → 1

curr_sum = max(1, 5 + 1) = 6

max_sum = max(5, 6) = 6

At index 7 → -5

curr_sum = max(-5, 6 + -5) = 1

max_sum = max(6, 1) = 6

At index 8 → 4

curr_sum = max(4, 1 + 4) = 5

max_sum = max(6, 5) = 6

✅ Final Answer: max_sum = 6
The subarray is [4, -1, 2, 1]
