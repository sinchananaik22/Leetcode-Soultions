class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        m, n = len(text1), len(text2)
        
        # Initialize DP table with 0
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        
        # Fill DP table
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if text1[i - 1] == text2[j - 1]:
                    dp[i][j] = 1 + dp[i - 1][j - 1]
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
        
        return dp[m][n]


Example Walkthrough

Input:

text1 = "abcde"
text2 = "ace"


DP matrix progression:

    ""  a  c  e
""  0   0  0  0
a   0   1  1  1
b   0   1  1  1
c   0   1  2  2
d   0   1  2  2
e   0   1  2  3


Answer = 3 ("ace").
