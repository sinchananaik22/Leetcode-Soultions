from typing import List

class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        n = len(nums)
        
        # Step 1: Find the first decreasing index i
        i = n - 2
        while i >= 0 and nums[i] >= nums[i + 1]:
            i -= 1
        
        if i >= 0:  # Found a valid "pivot"
            # Step 2: Find element just larger than nums[i]
            j = n - 1
            while nums[j] <= nums[i]:
                j -= 1
            # Step 3: Swap
            nums[i], nums[j] = nums[j], nums[i]
        
        # Step 4: Reverse suffix (i+1 ... end)
        left, right = i + 1, n - 1
        while left < right:
            nums[left], nums[right] = nums[right], nums[left]
            left += 1
            right -= 1



Example Walkthrough
Example 1

Input: nums = [1,2,3]

Step 1: i = 1 (since 2 < 3).

Step 2: Find j = 2 (nums[2]=3).

Step 3: Swap â†’ [1,3,2].

Step 4: Reverse suffix (only last element, no change).
ðŸ‘‰ Output = [1,3,2].

Example 2

Input: nums = [3,2,1]

Step 1: No decreasing element found.

Reverse all â†’ [1,2,3].
ðŸ‘‰ Output = [1,2,3].

Example 3

Input: nums = [1,1,5]

Step 1: i = 1 (since 1 < 5).

Step 2: Find j = 2 (nums[2]=5).

Step 3: Swap â†’ [1,5,1].

Step 4: Reverse suffix (only one element).
ðŸ‘‰ Output = [1,5,1].
