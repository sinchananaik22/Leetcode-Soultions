class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        char_set = set()
        left = 0
        max_len = 0
        
        for right in range(len(s)):
            while s[right] in char_set:
                char_set.remove(s[left])
                left += 1
            char_set.add(s[right])
            max_len = max(max_len, right - left + 1)
        
        return max_len



Example Walkthrough

Input: s = "abcabcbb"

Window [0,2] = "abc" → length=3

Next a repeats → move left to skip previous a → window [1,3] = "bca" → length still 3

Continue → "cab" → "abc" → "b" → "bb" → max length = 3

⚡ Complexity

Time: O(n) → each character visited at most twice

Space: O(min(n, charset)) → set of unique characters
