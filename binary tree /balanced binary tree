# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        
        # Returns (is_balanced, height)
        def check(node):
            if not node:
                return True, 0
            
            left_balanced, left_height = check(node.left)
            right_balanced, right_height = check(node.right)
            
            # Current node is balanced if left & right subtrees are balanced
            # and the height difference <= 1
            balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1
            height = 1 + max(left_height, right_height)
            
            return balanced, height
        
        balanced, _ = check(root)
        return balanced



        Input: [3,9,20,null,null,15,7]

       3
      / \
     9  20
        / \
       15  7

Output: True
Time & Space Complexity

Time: O(n) → visit each node once

Space: O(h) → recursion stack, h = height of tree
