class MinStack:

    def __init__(self):
        self.stack = []      # main stack
        self.min_stack = []  # stack to keep track of current min

    def push(self, val: int) -> None:
        self.stack.append(val)
        # If min_stack is empty or val <= current min, push to min_stack
        if not self.min_stack or val <= self.min_stack[-1]:
            self.min_stack.append(val)

    def pop(self) -> None:
        val = self.stack.pop()
        # Pop from min_stack if it's the current minimum
        if val == self.min_stack[-1]:
            self.min_stack.pop()

    def top(self) -> int:
        return self.stack[-1]

    def getMin(self) -> int:
        return self.min_stack[-1]



Example Walkthrough
minStack = MinStack()
minStack.push(-2)       # stack=[-2], min_stack=[-2]
minStack.push(0)        # stack=[-2,0], min_stack=[-2]
minStack.push(-3)       # stack=[-2,0,-3], min_stack=[-2,-3]
minStack.getMin()       # return -3
minStack.pop()          # removes -3 → stack=[-2,0], min_stack=[-2]
minStack.top()          # return 0
minStack.getMin()       # return -2

Time & Space Complexity

push, pop, top, getMin → O(1)

Space → O(n) for main + min stack
