from collections import deque
from typing import List

class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        if not nums or k == 0:
            return []
        
        result = []
        dq = deque()  # Stores indices of elements, largest at front

        for i, num in enumerate(nums):
            # Remove indices that are out of the current window
            while dq and dq[0] < i - k + 1:
                dq.popleft()
            
            # Remove elements smaller than current from the deque
            while dq and nums[dq[-1]] < num:
                dq.pop()
            
            dq.append(i)
            
            # Append current max to result (start when first window is complete)
            if i >= k - 1:
                result.append(nums[dq[0]])
        
        return result







Example Walkthrough
nums = [1,3,-1,-3,5,3,6,7], k = 3


i=0 → dq=[0]

i=1 → 3>1 → pop 0 → dq=[1]

i=2 → -1 → dq=[1,2] → max=3

i=3 → -3 → dq=[1,2,3] → remove 1? No, max=3

i=4 → 5 → pop smaller [-3,-1,3] → dq=[4] → max=5

Continue similarly → result=[3,3,5,5,6,7]

Time Complexity

O(n) → each element added/removed at most once in deque

Space Complexity

O(k) → deque stores at most k elements
