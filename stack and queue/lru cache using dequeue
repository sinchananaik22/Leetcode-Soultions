from collections import deque

class LRUCache:
    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = {}        # key -> value
        self.order = deque()   # stores keys in LRU order

    def get(self, key: int) -> int:
        if key not in self.cache:
            return -1
        # Move key to the end to mark it as recently used
        self.order.remove(key)
        self.order.append(key)
        return self.cache[key]

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            # Update value and mark as recently used
            self.cache[key] = value
            self.order.remove(key)
            self.order.append(key)
        else:
            if len(self.cache) >= self.capacity:
                # Evict least recently used key
                lru = self.order.popleft()
                del self.cache[lru]
            # Add new key
            self.cache[key] = value
            self.order.append(key)
